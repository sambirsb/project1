{"version":3,"file":"static/js/958.9cb5f208.chunk.js","mappings":"0PAIIA,EAAkB,SAACC,GACnB,MAAO,CACHC,UAAWD,EAAME,KAAKD,UAE9B,E,oBCPA,EAAwB,qBAAxB,EAAoD,oBAApD,EAAmF,wBAAnF,EAA4H,8BAA5H,EAAsK,yBAAtK,EAAsM,oBAAtM,EAAgO,mBAAhO,EAA6P,uBCSvPE,EAAmBC,EAAAA,KAAaC,MAAM,CACxCC,MAAOF,EAAAA,KAAaG,WACpBC,SAAUJ,EAAAA,KAAaG,WACvBE,QAASL,EAAAA,OAGPM,EAAYC,EAAAA,MAAW,SAACC,GAE1B,OAA4CC,EAAAA,EAAAA,WAAS,GAAM,eAAtDC,EAAe,KAAEC,EAAkB,KACxC,GAAoCF,EAAAA,EAAAA,YAAU,eAAzCG,EAAW,KAAEC,EAAc,KAChC,GAAoCJ,EAAAA,EAAAA,WAAS,GAAM,eAA9CK,EAAW,KAAEC,EAAc,KAChC,GAA4BN,EAAAA,EAAAA,YAAU,eAAjCO,EAAO,KAAEC,EAAU,KAExB,OACI,SAAC,KAAM,CAACC,cAAe,CACnBhB,MAAO,GACPE,SAAU,GACVe,YAAY,EACZH,QAAQ,IAERjB,iBAAkBA,EAClBqB,SAAQ,yCAAG,WAAOC,GAAM,8FACCb,EAAMc,QAAQD,GAAO,OAA9B,OAARE,EAAQ,gBACQf,EAAMgB,aAAY,OAAlCR,EAAO,OACXC,EAAWD,EAAQS,KACH,IAAbF,EACCZ,GAAmB,GAEF,KAAbY,GACJZ,GAAmB,GACnBE,EAAe,gCACfE,GAAe,KAGfJ,GAAmB,GACnBE,EAAeU,IAClB,2CACJ,mDAhBO,GAgBN,UACF,UAAC,KAAI,CAACG,UAAWC,EAAO,WACpB,0BACI,SAAC,KAAK,CAACC,YAAY,QAAQC,KAAK,aAEpC,0BACI,SAAC,KAAK,CAACD,YAAY,WAAWE,KAAM,WAAYD,KAAK,gBAEzD,iBAAKH,UAAWC,EAAW,WACvB,SAAC,KAAK,CAACG,KAAM,WAAYD,KAAK,gBAAe,6CAEhDf,IAAe,iBAAKY,UAAWC,EAAU,WACtC,0BACI,gBAAKI,IAAKf,OAEd,SAAC,KAAK,CAACa,KAAK,UAAUD,YAAY,uBAErClB,IAAmB,gBAAKgB,UAAWC,EAAQ,SAAEf,KAC9C,0BACI,mBAAQkB,KAAK,SAAQJ,UAAWC,EAAM,yBAK1D,IAEMzB,EAAQK,EAAAA,MAAW,SAACC,GAEtB,OAAO,iBAAKkB,UAAWC,EAAY,WAC/B,eAAID,UAAWC,EAAO,oBACtB,gBAAKD,UAAWC,EAAiB,UAC7B,SAACrB,EAAS,CAACgB,QAASd,EAAMc,QAASE,WAAYhB,EAAMgB,iBAGjE,IAGA,GAAeQ,EAAAA,EAAAA,KFzEgB,SAACC,GAO5B,OAAOC,EAAAA,EAAAA,IAAQvC,EAAiB,CAAC,EAA1BuC,EANiB,SAAC1B,GACrB,OAAGA,EAAMX,WACE,SAAC,KAAQ,CAACsC,GAAI,4BAElB,SAACF,GAAS,UAAKzB,GAC1B,GAEJ,IEmEI0B,EAAAA,EAAAA,IAAQ,KAAM,CAAEZ,QAAAA,EAAAA,GAASE,WAAAA,EAAAA,KAF7B,CAGEtB,E","sources":["hoc/LoginedRedirect.jsx","webpack://my-site/./src/components/Login/Login.module.css?3530","components/Login/Login.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isLogined: state.auth.isLogined,\r\n    }\r\n}\r\n\r\n\r\nexport const LoginedRedirect = (Component) => {\r\n    let RedirectComponent = (props) => {\r\n        if(props.isLogined) {\r\n            return <Navigate to={'/userProfile/myprofile'}/>\r\n        }\r\n        return <Component {...props}/>\r\n    }\r\n    return connect(mapStateToProps, {})(RedirectComponent)\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"Login_error__psMcr\",\"form\":\"Login_form__ZYiYR\",\"checkbox\":\"Login_checkbox__P8ETO\",\"form_container\":\"Login_form_container__locL0\",\"container\":\"Login_container__2QRix\",\"span\":\"Login_span__6ErZs\",\"btn\":\"Login_btn__Tzvg6\",\"captcha\":\"Login_captcha__NVIo8\"};","import { Field, Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { LoginedRedirect } from \"../../hoc/LoginedRedirect\";\r\nimport { loginMe, getCaptcha } from \"../../redux/auth-reducer\";\r\nimport * as yup from 'yup'\r\nimport c from './Login.module.css'\r\nimport { useState } from \"react\";\r\n\r\nconst validationSchema = yup.object().shape({\r\n    Login: yup.string().required(),\r\n    Password: yup.string().required(),\r\n    Captcha: yup.string(),\r\n})\r\n\r\nconst LoginForm = React.memo((props) => {\r\n\r\n    let [serverHaveError, setHaveServerError] = useState(false)\r\n    let [serverError, setServerError] = useState()\r\n    let [needCaptcha, setNeedCaptcha] = useState(false)\r\n    let [captcha, setCaptcha] = useState()\r\n\r\n    return (\r\n        <Formik initialValues={{\r\n            Login: '',\r\n            Password: '',\r\n            RememberMe: false,\r\n            captcha:'',\r\n        }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={ async (values) => {\r\n                let response = await props.loginMe(values)\r\n                let captcha = await props.getCaptcha()\r\n                setCaptcha(captcha.url)\r\n                if(response === 0) {\r\n                    setHaveServerError(false)\r\n                }\r\n                else if(response === 10) {\r\n                    setHaveServerError(true)\r\n                    setServerError('You need to complete captcha')\r\n                    setNeedCaptcha(true)\r\n                }\r\n                else {\r\n                    setHaveServerError(true)\r\n                    setServerError(response)\r\n                }\r\n            }}>\r\n            <Form className={c.form} >\r\n                <div>\r\n                    <Field placeholder=\"Login\" name=\"Login\" />\r\n                </div>\r\n                <div>\r\n                    <Field placeholder=\"Password\" type={'password'} name=\"Password\" />\r\n                </div>\r\n                <div className={c.checkbox}>\r\n                    <Field type={'checkbox'} name='RememberMe' /><span>Remember Me</span>\r\n                </div>\r\n                {needCaptcha && <div className={c.captcha}>\r\n                    <div>\r\n                        <img src={captcha}/>\r\n                    </div>\r\n                    <Field name='Captcha' placeholder='Text from photo'/>\r\n                </div>}\r\n                {serverHaveError && <div className={c.error}>{serverError}</div>}\r\n                <div>\r\n                    <button type='submit'className={c.btn}>Login</button>\r\n                </div>\r\n            </Form>\r\n        </Formik>\r\n    )\r\n})\r\n\r\nconst Login = React.memo((props) => {\r\n\r\n    return <div className={c.container}>\r\n        <h1 className={c.span}>Login</h1>\r\n        <div className={c.form_container}>\r\n            <LoginForm loginMe={props.loginMe} getCaptcha={props.getCaptcha} />\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\nexport default compose(\r\n    LoginedRedirect,\r\n    connect(null, { loginMe, getCaptcha })\r\n)(Login)"],"names":["mapStateToProps","state","isLogined","auth","validationSchema","yup","shape","Login","required","Password","Captcha","LoginForm","React","props","useState","serverHaveError","setHaveServerError","serverError","setServerError","needCaptcha","setNeedCaptcha","captcha","setCaptcha","initialValues","RememberMe","onSubmit","values","loginMe","response","getCaptcha","url","className","c","placeholder","name","type","src","compose","Component","connect","to"],"sourceRoot":""}